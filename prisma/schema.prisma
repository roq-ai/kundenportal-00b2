generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model application {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status          String    @db.VarChar(255)
  submission_date DateTime  @db.Timestamp(6)
  approval_date   DateTime? @db.Timestamp(6)
  rejection_date  DateTime? @db.Timestamp(6)
  program_id      String    @db.Uuid
  user_id         String    @db.Uuid
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @default(now()) @db.Timestamp(6)
  program         program   @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  funding         funding[]
  review          review[]
}

model company {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  address     String?   @db.VarChar(255)
  city        String?   @db.VarChar(255)
  state       String?   @db.VarChar(255)
  zip_code    String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  program     program[]
}

model funding {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount         Int
  funding_date   DateTime    @db.Timestamp(6)
  funding_status String      @db.VarChar(255)
  application_id String      @db.Uuid
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @default(now()) @db.Timestamp(6)
  application    application @relation(fields: [application_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model program {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String        @db.VarChar(255)
  description String?       @db.VarChar(255)
  start_date  DateTime      @db.Timestamp(6)
  end_date    DateTime      @db.Timestamp(6)
  status      String        @db.VarChar(255)
  company_id  String        @db.Uuid
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  application application[]
  company     company       @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model review {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating         Int
  comment        String?     @db.VarChar(255)
  review_date    DateTime    @db.Timestamp(6)
  application_id String      @db.Uuid
  user_id        String      @db.Uuid
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @default(now()) @db.Timestamp(6)
  application    application @relation(fields: [application_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  application application[]
  company     company[]
  review      review[]
}
